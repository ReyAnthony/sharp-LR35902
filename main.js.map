{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/app.component.css","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/assembler/assembler.component.css","webpack:///./src/app/assembler/assembler.component.html","webpack:///./src/app/assembler/assembler.component.ts","webpack:///./src/app/controls/controls.component.css","webpack:///./src/app/controls/controls.component.html","webpack:///./src/app/controls/controls.component.ts","webpack:///./src/app/cpu-infos/cpu-infos.component.css","webpack:///./src/app/cpu-infos/cpu-infos.component.html","webpack:///./src/app/cpu-infos/cpu-infos.component.ts","webpack:///./src/app/documentation/documentation.component.css","webpack:///./src/app/documentation/documentation.component.html","webpack:///./src/app/documentation/documentation.component.ts","webpack:///./src/app/memory-viewer/memory-viewer.component.css","webpack:///./src/app/memory-viewer/memory-viewer.component.html","webpack:///./src/app/memory-viewer/memory-viewer.component.ts","webpack:///./src/app/misc/pipes/binaryPipe.ts","webpack:///./src/app/misc/pipes/hexPipe.ts","webpack:///./src/app/program-loader/program-loader.component.css","webpack:///./src/app/program-loader/program-loader.component.html","webpack:///./src/app/program-loader/program-loader.component.ts","webpack:///./src/app/screen/screen.component.css","webpack:///./src/app/screen/screen.component.html","webpack:///./src/app/screen/screen.component.ts","webpack:///./src/app/services/assembler.service.ts","webpack:///./src/app/services/cpu/cpu/cpu.ts","webpack:///./src/app/services/cpu/cpu/memory.ts","webpack:///./src/app/services/cpu/cpu/opcode-fetcher.ts","webpack:///./src/app/services/cpu/cpu/register-helper.ts","webpack:///./src/app/services/cpu/custom-types.ts","webpack:///./src/app/services/cpu/hardware.service.ts","webpack:///./src/app/services/documentation.service.ts","webpack:///./src/app/services/program-loader.service.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","module.exports = \"\\n\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2FwcC5jb21wb25lbnQuY3NzIn0= */\"","module.exports = \"<nav class=\\\"navbar navbar-default navbar-static-top\\\">\\n    <div class=\\\"container\\\">\\n        <div class=\\\"navbar-header\\\">\\n            <a class=\\\"navbar-brand\\\" href=\\\"#\\\">sharp-z80 Emu</a>\\n        </div>\\n        <div class=\\\"collapse navbar-collapse\\\">\\n            <ul class=\\\"nav navbar-nav\\\">\\n                <li (click)=\\\"goToProcessorPanel()\\\" [ngClass]=\\\"{'active' : processorPanel}\\\"><a href=\\\"#\\\"> Processor </a></li>\\n                <li (click)=\\\"goToProgramLoaderPanel()\\\" [ngClass]=\\\"{'active' : programLoaderPanel}\\\"><a href=\\\"#\\\"> Program Loader </a></li>\\n                <!-- <li (click)=\\\"goToAsmPanel()\\\" [ngClass]=\\\"{'active' : assemblerPanel}\\\" ><a href=\\\"#\\\"> Assembler </a></li> -->\\n                <li (click)=\\\"goToDocPanel()\\\" [ngClass]=\\\"{'active' : docPanel}\\\" ><a href=\\\"#\\\"> Documentation </a></li>\\n            </ul>\\n        </div>\\n    </div>\\n</nav>\\n<div *ngIf=\\\"processorPanel === true\\\" class=\\\"container\\\">\\n    <div class=\\\"row\\\"> \\n        <div class=\\\"col-md-6\\\">\\n            <app-cpu-infos ></app-cpu-infos>\\n            <app-controls></app-controls>\\n        </div>\\n        <div class=\\\"col-md-3\\\">\\n            <div class=\\\"container\\\">\\n                <!-- \\n                    <app-screen class=\\\"row\\\"></app-screen>\\n                -->\\n            </div>\\n        </div>\\n        <app-memory-viewer class=\\\"col-md-6\\\"></app-memory-viewer>\\n    </div>\\n</div>\\n<div *ngIf=\\\"docPanel === true\\\" class=\\\"container\\\"> \\n<app-documentation></app-documentation>\\n</div>\\n<div *ngIf=\\\"asmPanel === true\\\" class=\\\"container\\\"> \\n<app-assembler></app-assembler>\\n</div>\\n<div *ngIf=\\\"programLoaderPanel === true\\\" class=\\\"container\\\"> \\n<app-program-loader></app-program-loader>\\n</div>\\n\"","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  processorPanel = true;\n  docPanel = false;\n  asmPanel = false;\n  programLoaderPanel = false;\n\n  private reset() {\n    this.processorPanel = false;\n    this.docPanel = false;\n    this.asmPanel = false;\n    this.programLoaderPanel = false;\n  }\n\n  goToProcessorPanel() {\n    this.reset();\n    this.processorPanel = true;\n  }\n\n  goToDocPanel() {\n    this.reset();\n    this.docPanel = true;\n  }\n\n  goToAsmPanel() {\n    this.reset();\n    this.asmPanel = true;\n  }\n\n  goToProgramLoaderPanel() {\n    this.reset();\n    this.programLoaderPanel = true;\n  }\n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { FormsModule } from '@angular/forms';\nimport { NgModule } from '@angular/core';\n\nimport { AppComponent } from './app.component';\nimport { ScreenComponent } from './screen/screen.component';\nimport { ControlsComponent } from './controls/controls.component';\nimport { CpuInfosComponent } from './cpu-infos/cpu-infos.component';\nimport { BinaryPipe } from './misc/pipes/binaryPipe';\nimport { MemoryViewerComponent } from './memory-viewer/memory-viewer.component';\nimport { HexPipe } from './misc/pipes/hexPipe';\nimport { ProgramLoaderComponent } from './program-loader/program-loader.component';\nimport { DocumentationComponent } from './documentation/documentation.component';\nimport { AssemblerComponent } from './assembler/assembler.component';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    ScreenComponent,\n    ControlsComponent,\n    CpuInfosComponent,\n    BinaryPipe,\n    HexPipe,\n    MemoryViewerComponent,\n    ProgramLoaderComponent,\n    DocumentationComponent,\n    AssemblerComponent\n  ],\n  imports: [\n    BrowserModule,\n    FormsModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","module.exports = \"textarea {\\n    width: 100%; /* Safari/Chrome, other WebKit */    /* Firefox, other Gecko */\\n    box-sizing: border-box;         /* Opera/IE 8+ */\\n    resize: none;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvYXNzZW1ibGVyL2Fzc2VtYmxlci5jb21wb25lbnQuY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0lBQ0ksWUFBWSxDQUNvQixpQ0FBaUMsSUFDakMsMEJBQTBCO0lBQzFELHVCQUF1QixTQUFTLGlCQUFpQjtJQUNqRCxhQUFhO0NBQ2hCIiwiZmlsZSI6InNyYy9hcHAvYXNzZW1ibGVyL2Fzc2VtYmxlci5jb21wb25lbnQuY3NzIiwic291cmNlc0NvbnRlbnQiOlsidGV4dGFyZWEge1xuICAgIHdpZHRoOiAxMDAlO1xuICAgIC13ZWJraXQtYm94LXNpemluZzogYm9yZGVyLWJveDsgLyogU2FmYXJpL0Nocm9tZSwgb3RoZXIgV2ViS2l0ICovXG4gICAgLW1vei1ib3gtc2l6aW5nOiBib3JkZXItYm94OyAgICAvKiBGaXJlZm94LCBvdGhlciBHZWNrbyAqL1xuICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7ICAgICAgICAgLyogT3BlcmEvSUUgOCsgKi9cbiAgICByZXNpemU6IG5vbmU7XG59Il19 */\"","module.exports = \"<h1> Assembler </h1>\\n<div>\\n    <textarea rows=\\\"10\\\" [(ngModel)]=\\\"assemblerService.assemblyBeingWritten\\\" placeholder=\\\"Please insert newline separated assembly instructions\\\"></textarea>\\n    <button (click)=\\\"loadProgram()\\\"> Assemble ! </button>\\n</div>\\n\\n<h1> Assembly result </h1>\\n<div>\\n    \\n</div>\\n\\n\"","import { Component, OnInit } from '@angular/core';\nimport { AssemblerService } from '../services/assembler.service';\n\n@Component({\n  selector: 'app-assembler',\n  templateUrl: './assembler.component.html',\n  styleUrls: ['./assembler.component.css']\n})\nexport class AssemblerComponent implements OnInit {\n\n  constructor(private assemblerService: AssemblerService) { }\n\n  ngOnInit() {\n  }\n\n}\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2NvbnRyb2xzL2NvbnRyb2xzLmNvbXBvbmVudC5jc3MifQ== */\"","module.exports = \"\\n<input type=\\\"number\\\" [(ngModel)]=\\\"ms\\\"/> \\n<button (click)=\\\"setCpuMs()\\\"> Set CPU cycle time in MS </button>\\n<button *ngIf=\\\"!isRunning()\\\" (click)=\\\"turnOn()\\\"> Run </button>\\n<button *ngIf=\\\"isRunning() && !isPaused()\\\" (click)=\\\"pause()\\\" >Pause</button>\\n<button *ngIf=\\\"isRunning() && isPaused()\\\" (click)=\\\"pause()\\\" >Unpause</button>\\n<button *ngIf=\\\"isRunning()\\\" (click)=\\\"stop()\\\" >Stop</button>\\n<button (click)=\\\"reset()\\\" >Reset</button>\"","import { Component, OnInit } from '@angular/core';\nimport { HardwareService } from '../services/cpu/hardware.service';\n\n@Component({\n  selector: 'app-controls',\n  templateUrl: './controls.component.html',\n  styleUrls: ['./controls.component.css']\n})\nexport class ControlsComponent implements OnInit {\n\n  private ms = 20;\n  constructor(private hardwareService: HardwareService) { }\n\n  ngOnInit() {\n    this.setCpuMs();\n  }\n\n  turnOn() {\n    this.hardwareService.turnOn();\n  }\n\n  pause() {\n    this.hardwareService.pause();\n  }\n\n  stop() {\n    this.hardwareService.stop();\n  }\n\n  reset () {\n    this.hardwareService.reset();\n  }\n\n  isPaused(): boolean {\n    return this.hardwareService.isPaused();\n  }\n\n  isRunning(): boolean {\n    return this.hardwareService.isRunning();\n  }\n\n  setCpuMs() {\n    this.hardwareService.setCPuStepMs(this.ms);\n  }\n}\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2NwdS1pbmZvcy9jcHUtaW5mb3MuY29tcG9uZW50LmNzcyJ9 */\"","module.exports = \"<h1> Registers status </h1>\\n<table class=\\\"table table-bordered\\\">\\n  <tr>\\n    <th>Register</th>\\n    <th>Bin</th>\\n    <th>Hex</th>\\n    <th>Dec</th>\\n  </tr>\\n    <tr *ngFor=\\\"let register of hardwareService.getCpuRegisters()\\\">\\n      <td> {{register.name  | uppercase }}  </td>\\n      <td> {{register.value | binaryPipe }} </td>\\n      <td> {{register.value | hexPipe }} </td>\\n      <td> {{register.value  }} </td>\\n    </tr>\\n</table> \\n \"","import { Component, OnInit } from '@angular/core';\nimport { HardwareService } from '../services/cpu/hardware.service';\n\n@Component({\n  selector: 'app-cpu-infos',\n  templateUrl: './cpu-infos.component.html',\n  styleUrls: ['./cpu-infos.component.css']\n})\nexport class CpuInfosComponent implements OnInit {\n\n  constructor(public hardwareService: HardwareService) { }\n\n  ngOnInit() {\n  }\n}\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2RvY3VtZW50YXRpb24vZG9jdW1lbnRhdGlvbi5jb21wb25lbnQuY3NzIn0= */\"","module.exports = \"<h1> Opcodes documentation </h1>\\n\\n<p> The processor has {{ getOpcodes().length }} opcodes implemented. (Out of 255)</p> <br/>\\n\\n<label> \\n    Filter : \\n    <input [(ngModel)]=\\\"documentationService.filter\\\" type=\\\"text\\\"/> \\n</label>\\n\\n<div *ngFor=\\\"let opcode of getFilteredOpcodes()\\\">\\n  <h2 id=\\\"{{opcode.code}}\\\"> {{opcode.name}} </h2>\\n  <table class=\\\"table table-bordered\\\">\\n      <tr>\\n        <th>Opcode</th>\\n        <th>Opcode size</th>\\n        <th>Template</th>\\n        <th>Parameters</th>\\n        <th>Cycles</th>\\n        <th>PC incrementation</th>\\n      </tr>\\n      <tr>\\n        <td> {{opcode.code | hexPipe }} </td>\\n        <td> {{opcode.opcodeBytes}} </td>\\n        <td>{{opcode.template}}</td>\\n        <td>{{opcode.params}}</td>\\n        <td>{{opcode.cycles}}</td>\\n        <td>{{opcode.pcInc}}</td>\\n      </tr>\\n    </table> \\n  <p> {{opcode.doc}} </p>\\n  <br/>\\n</div>\\n\\n<p *ngIf=\\\"getFilteredOpcodes().length === 0\\\">\\n    <br/>\\n\\n  Nothing to show ! Try using broader criterias. \\n</p>\\n\"","import { Component, OnInit } from '@angular/core';\nimport { HardwareService } from '../services/cpu/hardware.service';\nimport { OpcodeMeta, Opcode } from '../services/cpu/custom-types';\nimport { DocumentationService } from '../services/documentation.service';\n\n@Component({\n  selector: 'app-documentation',\n  templateUrl: './documentation.component.html',\n  styleUrls: ['./documentation.component.css']\n})\nexport class DocumentationComponent implements OnInit {\n\n  private opcodes: Array<OpcodeMeta>;\n\n  constructor(private hardwareService: HardwareService, private documentationService: DocumentationService) { }\n\n  ngOnInit() {\n    this.opcodes = this.hardwareService.getOpcodes();\n  }\n\n  getOpcodes(): Array<OpcodeMeta> {\n    return this.opcodes;\n  }\n\n  getFilteredOpcodes(): Array<OpcodeMeta> {\n    if (this.documentationService.filter !== '' ) {\n      return this.opcodes.filter((o) => o.name.toLowerCase().includes(this.documentationService.filter.toLowerCase()));\n    }\n    return this.opcodes;\n  }\n}\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL21lbW9yeS12aWV3ZXIvbWVtb3J5LXZpZXdlci5jb21wb25lbnQuY3NzIn0= */\"","module.exports = \"<h1> Memory viewer </h1>\\n<div>\\n  <div *ngIf=\\\"!memEdit\\\">\\n    <label> \\n      <input type=\\\"checkbox\\\" [(ngModel)]=\\\"followPC\\\"/>  Follow PC ?  \\n    </label>\\n  </div>\\n  <div>\\n    <label>  \\n      <input type=\\\"checkbox\\\" (click)=\\\"updateMem()\\\" [(ngModel)]=\\\"memEdit\\\"/>  Mem edit ? \\n    </label>\\n    <button *ngIf=\\\"memEdit\\\" class=\\\"pull-right\\\" (click)=\\\"saveMemEdits()\\\"> Save edits </button>\\n  </div>\\n</div>\\n\\n<div *ngIf=\\\"!followPC && !memEdit\\\">\\n    <label> \\n        Start address : \\n        <input type=\\\"number\\\" [(ngModel)]=\\\"startAddress\\\">\\n      </label>\\n      <label> \\n          End address : \\n          <input type=\\\"number\\\" [(ngModel)]=\\\"endAddress\\\">\\n      </label>\\n</div>\\n\\n\\n<table *ngIf=\\\"!memEdit\\\" class=\\\"table table-bordered\\\">\\n   <tr>\\n     <th> Addr </th>\\n     <th> Hex </th>\\n     <th> Bin </th>\\n     <th> Dec </th>\\n     <th> Instruction </th>\\n   </tr>\\n   <tr [ngClass]=\\\"{'success' : isPC(data.address) && !pcOnUnknownOpcode(data.address), 'danger': pcOnUnknownOpcode(data.address)}\\\" *ngFor=\\\"let data of getMemory()\\\">\\n     <td> {{ data.address | hexPipe }} </td>\\n     <td> {{ data.value | hexPipe }} </td>\\n     <td> {{ data.value | binaryPipe }} </td>\\n     <td> {{ data.value  }} </td>\\n     <td> {{ data.opcodeHumanReadable }} </td>\\n   </tr>\\n </table> \\n\\n <table *ngIf=\\\"memEdit\\\" class=\\\"table table-bordered\\\">\\n  <tr>\\n    <th> Addr </th>\\n    <th> Hex </th>\\n    <th> Bin </th>\\n    <th> Instruction </th>\\n    <th> Value </th>\\n  </tr>\\n  <tr [ngClass]=\\\"{'success' : isPC(data.address) && !pcOnUnknownOpcode(data.address), 'danger': pcOnUnknownOpcode(data.address)}\\\" *ngFor=\\\"let data of memoryCopy\\\">\\n    <td> {{ data.address | hexPipe }} </td>\\n    <td> {{ data.value | hexPipe }} </td>\\n    <td> {{ data.value | binaryPipe }} </td>\\n    <td> {{ data.opcodeHumanReadable }} </td>\\n    <td> <input type=\\\"number\\\" [(ngModel)]=\\\"data.value\\\"> </td>\\n  </tr>\\n</table> \\n\\n\"","import { Component, OnInit } from '@angular/core';\nimport { HardwareService } from '../services/cpu/hardware.service';\n\ntype mappedMemory =  Array<{address: number, value: number, opcodeHumanReadable: string}>;\n\n@Component({\n  selector: 'app-memory-viewer',\n  templateUrl: './memory-viewer.component.html',\n  styleUrls: ['./memory-viewer.component.css']\n})\nexport class MemoryViewerComponent implements OnInit {\n\n  startAddress = 0x100;\n  endAddress = 0x100 + 15;\n  followPC = false;\n  memEdit = false;\n  memoryCopy: mappedMemory;\n\n  constructor(private hardwareService: HardwareService) { }\n  ngOnInit() {\n  }\n\n  isPC(address: number): boolean {\n    return this.hardwareService.getCpuRegisters()\n                      .find((o) => o.name === 'pc')\n                      .value === address;\n  }\n\n  pcOnUnknownOpcode(address: number): boolean {\n    return this.isPC(address) &&  this.getMemory().find((m) => m.address === address).opcodeHumanReadable === 'UNKNOWN';\n  }\n\n  getMemory(): mappedMemory {\n    if (!this.followPC) {\n      return this.hardwareService.getMemory(this.startAddress, this.endAddress);\n    } else {\n      return this.hardwareService.getMemory(this.getPC(), this.getPC() + 16);\n    }\n  }\n\n  updateMem() {\n    this.memoryCopy = this.getMemory();\n  }\n\n  saveMemEdits() {\n    this.memoryCopy.forEach((e) => {\n      this.hardwareService.updateMemory(e.address, e.value);\n    });\n    this.memoryCopy = this.getMemory();\n  }\n\n  private getPC(): number {\n    return this.hardwareService.getCpuRegisters()\n                      .find((o) => o.name === 'pc').value;\n  }\n}\n","import { PipeTransform, Pipe } from '@angular/core';\n\n@Pipe({name: 'binaryPipe'})\nexport class BinaryPipe implements PipeTransform {\n    transform(value: number): string {\n        if (!value) { return '0000000000000000'; }\n        const bin = value.toString(2);\n        return bin.padStart(16, '0');\n    }\n}\n","import { PipeTransform, Pipe } from '@angular/core';\n\n@Pipe({name: 'hexPipe'})\nexport class HexPipe implements PipeTransform {\n    transform(value: number): string {\n        if (!value) { return '0000'; }\n        const hex = value.toString(16);\n        return hex.padStart(4, '0').toUpperCase();\n    }\n}\n","module.exports = \"textarea {\\n    width: 50%; /* Safari/Chrome, other WebKit */    /* Firefox, other Gecko */\\n    box-sizing: border-box;         /* Opera/IE 8+ */\\n    resize: none;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvcHJvZ3JhbS1sb2FkZXIvcHJvZ3JhbS1sb2FkZXIuY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtJQUNJLFdBQVcsQ0FDcUIsaUNBQWlDLElBQ2pDLDBCQUEwQjtJQUMxRCx1QkFBdUIsU0FBUyxpQkFBaUI7SUFDakQsYUFBYTtDQUNoQiIsImZpbGUiOiJzcmMvYXBwL3Byb2dyYW0tbG9hZGVyL3Byb2dyYW0tbG9hZGVyLmNvbXBvbmVudC5jc3MiLCJzb3VyY2VzQ29udGVudCI6WyJ0ZXh0YXJlYSB7XG4gICAgd2lkdGg6IDUwJTtcbiAgICAtd2Via2l0LWJveC1zaXppbmc6IGJvcmRlci1ib3g7IC8qIFNhZmFyaS9DaHJvbWUsIG90aGVyIFdlYktpdCAqL1xuICAgIC1tb3otYm94LXNpemluZzogYm9yZGVyLWJveDsgICAgLyogRmlyZWZveCwgb3RoZXIgR2Vja28gKi9cbiAgICBib3gtc2l6aW5nOiBib3JkZXItYm94OyAgICAgICAgIC8qIE9wZXJhL0lFIDgrICovXG4gICAgcmVzaXplOiBub25lO1xufSJdfQ== */\"","module.exports = \"<div>\\n    <h1> Program loader </h1>\\n    <textarea rows=\\\"30\\\" [(ngModel)]=\\\"programLoaderService.program\\\" placeholder=\\\"Please insert space separated hex opcodes\\\"></textarea>\\n    <textarea rows=\\\"30\\\" [ngModel]=\\\"getAsAsm()\\\" disabled placeholder=\\\"Please load the program into memory\\\"></textarea>\\n    <button (click)=\\\"loadProgram()\\\"> Load program </button>\\n    <button (click)=\\\"clear()\\\"> Clear </button>\\n    <button (click)=\\\"fetchTestProgram()\\\">Fetch test program</button>\\n</div>\\n\"","import { Component, OnInit } from '@angular/core';\nimport { HardwareService } from '../services/cpu/hardware.service';\nimport { ProgramLoaderService } from '../services/program-loader.service';\nimport { DEMO_PROGRAM } from '../services/cpu/custom-types';\nimport { Memory } from '../services/cpu/cpu/memory';\nimport { OpCodeFetcher } from '../services/cpu/cpu/opcode-fetcher';\n\n@Component({\n  selector: 'app-program-loader',\n  templateUrl: './program-loader.component.html',\n  styleUrls: ['./program-loader.component.css']\n})\nexport class ProgramLoaderComponent implements OnInit {\n\n  constructor(private hardwareService: HardwareService,\n              private programLoaderService: ProgramLoaderService) { }\n\n  ngOnInit() {\n  }\n\n  fetchTestProgram() {\n    this.programLoaderService.program = DEMO_PROGRAM;\n  }\n\n  loadProgram() {\n    this.hardwareService.loadProgram(this.programLoaderService.program.replace(/\\s/g, '\\n'));\n  }\n\n  clear() {\n    this.programLoaderService.program = '';\n  }\n\n  getAsAsm(): string {\n    const prog = this.programLoaderService.program.replace(/\\s/g, '\\n');\n    const maxRam = prog.split('\\n').length;\n    const memory = new Memory(maxRam);\n    const opcodeFetcher = new OpCodeFetcher(memory);\n\n    memory.loadProgram(prog, 0);\n\n    let str = '';\n    let currentAddress = 0;\n    while (currentAddress < maxRam) {\n      const opcode = opcodeFetcher.fetchOpcode(currentAddress);\n      const opcodeHumanReadable = opcode.getOpcodeHumanReadable();\n      opcodeHumanReadable !== 'UNKNOWN' ?  str += opcodeHumanReadable + '\\n' :  str += '--\\n';\n      currentAddress = currentAddress + opcode.getOpcodeTotalLength();\n    }\n    return str;\n  }\n}\n","module.exports = \"canvas {\\n    outline: black 3px solid;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvc2NyZWVuL3NjcmVlbi5jb21wb25lbnQuY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0lBQ0kseUJBQXlCO0NBQzVCIiwiZmlsZSI6InNyYy9hcHAvc2NyZWVuL3NjcmVlbi5jb21wb25lbnQuY3NzIiwic291cmNlc0NvbnRlbnQiOlsiY2FudmFzIHtcbiAgICBvdXRsaW5lOiBibGFjayAzcHggc29saWQ7XG59Il19 */\"","module.exports = \"<canvas width=\\\"160\\\" height=\\\"144\\\"></canvas>\"","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-screen',\n  templateUrl: './screen.component.html',\n  styleUrls: ['./screen.component.css']\n})\nexport class ScreenComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AssemblerService {\n\n  assemblyBeingWritten: string;\n\n  constructor() { }\n}\n","import { RegisterHelper } from './register-helper';\nimport { Memory } from './memory';\nimport { delay } from 'q';\nimport { Opcode } from '../custom-types';\nimport { OpCodeFetcher } from './opcode-fetcher';\n\nexport class CPU {\n\n    private readonly EMPTY = 0b0000_0000_0000_0000;\n\n    /* TODO those might be set in the constructor as we are\n       emulating the CPU here and not explicitely the GB */\n    /*\n    On power up, the GameBoy Program Counter is\n    initialized to $100 (100 hex) and the instruction found\n    at this location in ROM is executed.\n    The Program Counter from this point on is controlled,\n    indirectly, by the program instructions themselves that\n    were generated by the programmer of the ROM cart.\n    */\n    private readonly PC_INIT = 0x100;\n\n    /*\n      The GameBoy stack pointer is initialized to $FFFE on\n      power up but a programmer should not rely on this\n      setting and rather should explicitly set its value\n    */\n    private readonly SP_INIT = 0xFFFE;\n\n    private registerHelper: RegisterHelper;\n\n    private cpuStepMS = 5;\n    af: number;\n    bc: number;\n    de: number;\n    hl: number;\n    sp: number;\n    pc: number;\n\n    getA(): number {\n        return this.registerHelper.getA();\n    }\n\n    getF(): number {\n        return this.registerHelper.getF();\n    }\n\n    getB(): number {\n        return this.registerHelper.getB();\n    }\n\n    getC(): number {\n        return this.registerHelper.getC();\n    }\n\n    getD(): number {\n        return this.registerHelper.getD();\n    }\n\n    getE(): number {\n        return this.registerHelper.getE();\n    }\n\n    constructor(private opcodeFetcher: OpCodeFetcher) {\n        this.reset();\n        this.registerHelper = new RegisterHelper(this);\n    }\n\n    reset() {\n        this.pc = this.PC_INIT;\n        this.sp = this.SP_INIT;\n        this.af = this.EMPTY;\n        this.bc = this.EMPTY;\n        this.de = this.EMPTY;\n        this.hl = this.EMPTY;\n    }\n\n    step(): Q.Promise<void> {\n        const opcode: Opcode = this.opcodeFetcher.fetchOpcode(this.pc);\n        const cpuCyclesTaken: number = this.opcodeFetcher.executeOpCode(opcode, this.registerHelper);\n        const _delay = cpuCyclesTaken * this.cpuStepMS;\n        return delay(_delay);\n    }\n\n    setCpuStep(ms: number) {\n        this.cpuStepMS = ms;\n    }\n}\n","const _64KB_RAM = 0xFFFF;\n\nexport class Memory {\n\n    // TODO should be able to set banks (carts etc..)\n    // TODO should use a virtual address space and split the memory according to the memory map\n    // TODO Ideally this should be an interface so that the memory impl is irrelevent to the CPU etc...\n    // eg. ROM can't be written etc..\n    private memory: Array<number>;\n\n    constructor(private size: number = _64KB_RAM) {\n        this.reset();\n    }\n\n    getValueAtAdress(address: number): number {\n        // TODO should never return more than 0xFF\n        const val =  this.memory[address];\n        return val === undefined ? 0x0 : val;\n    }\n\n    setValueAtAdress(address: number, value: number) {\n        this.memory[address] = value;\n    }\n\n    reset() {\n        this.memory = new Array(this.size);\n    }\n\n    loadProgram(program: string, loadAddress: number) {\n\n        for (const c of program.split('\\n')) {\n            this.memory[loadAddress++] = Number.parseInt(c, 16);\n        }\n    }\n\n    // TODO should be using virtual address space\n    getMemory() {\n        return this.memory;\n    }\n}\n","import { Memory } from './memory';\nimport { Opcode, OpCodes, OpcodeMeta } from '../custom-types';\nimport { RegisterHelper } from './register-helper';\n\ninterface OpcodeParam {\n    parameters: Array<number>;\n    pcInc: number;\n    cycles: number;\n}\n\n// tslint:disable:no-bitwise\n// tslint:disable:max-line-length\nexport class OpCodeFetcher {\n\n    private opcodeMetas: Array<OpcodeMeta> = [];\n    // FETCHER\n    constructor(private memory: Memory) {\n       const o = this.makeOpcodeMeta;\n       const op = OpCodes;\n       const _this = this;\n\n       function LD_N_with_NNREG(p: OpcodeParam, registerValue: number, reg: RegisterHelper): number {\n            const destinationAddress = p.parameters[0];\n            memory.setValueAtAdress(destinationAddress, registerValue);\n            reg.incrementPC(p.pcInc);\n            return p.cycles;\n        }\n\n        function LD_NNREG_with_NN(p: OpcodeParam, store: (valueToStore: number) => void, reg: RegisterHelper): number {\n            const lsb = p.parameters[0];\n            const msb = p.parameters[1];\n            const val = _this.toLittleEndianByte(lsb, msb);\n            store(val);\n            reg.incrementPC(p.pcInc);\n            return p.cycles;\n        }\n\n       this.opcodeMetas =  [\n\n            o(op.NOP,  0, 4, 'NOP', 'Does nothing',\n            (p: OpcodeParam, registerHelper: RegisterHelper) => {\n                registerHelper.incrementPC(p.pcInc);\n                return p.cycles;\n            }),\n\n            // INC\n            o(op.INCA, 0, 4, 'INC A', 'Increments A, Z is set if result is zero. N is reset. H is set if carry from bit 3. C is Not affected',\n            (p: OpcodeParam, registerHelper: RegisterHelper) => {\n                registerHelper.incrementA();\n                const A = registerHelper.getA();\n                if (A === 0) {\n                    registerHelper.setZF(1);\n                }\n                registerHelper.setN(0);\n                if (registerHelper.CY === 1) {\n                    registerHelper.setH(1);\n                }\n                registerHelper.incrementPC(p.pcInc);\n                return p.cycles;\n            }),\n            o(op.INCC, 0, 4, 'INC C', 'Increments C, Z is set if result is zero. N is reset. H is set if carry from bit 3. C is Not affected',\n            (p: OpcodeParam, registerHelper: RegisterHelper) => {\n                registerHelper.incrementC();\n                registerHelper.incrementPC(p.pcInc);\n                return p.cycles;\n            }),\n            o(op.DECA, 0, 4, 'DEC A', 'Decrements A',\n            (p: OpcodeParam, registerHelper: RegisterHelper) => {\n                registerHelper.decrementA();\n                registerHelper.incrementPC(p.pcInc);\n                return p.cycles;\n            }),\n            o(op.INCBC, 0, 8, 'INC BC', 'Increments BC',\n            (p: OpcodeParam, registerHelper: RegisterHelper) => {\n                registerHelper.incrementBC();\n                registerHelper.incrementPC(p.pcInc);\n                return p.cycles;\n            }),\n            o(op.INCDE, 0, 8, 'INC DE', 'Increments DE',\n            (p: OpcodeParam, registerHelper: RegisterHelper) => {\n                registerHelper.incrementDE();\n                registerHelper.incrementPC(p.pcInc);\n                return p.cycles;\n            }),\n            o(op.INCHL, 0, 8, 'INC HL', 'Increments HL',\n            (p: OpcodeParam, registerHelper: RegisterHelper) => {\n                registerHelper.incrementHL();\n                registerHelper.incrementPC(p.pcInc);\n                return p.cycles;\n            }),\n            o(op.INCSP, 0, 8, 'INC SP', 'Increment the Stack Pointer',\n            (p: OpcodeParam, registerHelper: RegisterHelper) => {\n                registerHelper.incrementSP();\n                registerHelper.incrementPC(p.pcInc);\n                return p.cycles;\n            }),\n\n            // DEC\n            o(op.DECBC, 0, 8, 'DEC BC', 'Decrements BC',\n            (p: OpcodeParam, registerHelper: RegisterHelper) => {\n                registerHelper.decrementBC();\n                registerHelper.incrementPC(p.pcInc);\n                return p.cycles;\n            }),\n            o(op.DECDE, 0, 8, 'DEC DE', 'Decrements DE',\n            (p: OpcodeParam, registerHelper: RegisterHelper) => {\n                registerHelper.decrementDE();\n                registerHelper.incrementPC(p.pcInc);\n                return p.cycles;\n            }),\n            o(op.DECHL, 0, 8, 'DEC HL', 'Decrements HL',\n            (p: OpcodeParam, registerHelper: RegisterHelper) => {\n                registerHelper.decrementHL();\n                registerHelper.incrementPC(p.pcInc);\n                return p.cycles;\n            }),\n            o(op.DECSP, 0, 8, 'DEC SP', 'Decrements the Stack Pointer',\n            (p: OpcodeParam, registerHelper: RegisterHelper) => {\n                registerHelper.decrementSP();\n                registerHelper.incrementPC(p.pcInc);\n                return p.cycles;\n            }),\n\n            // JP\n            o(op.JPNN, 2, 12, 'JP 0x${1}${0}', 'Jumps to a NN',\n            (p: OpcodeParam, registerHelper: RegisterHelper) => {\n                const lsb = p.parameters[0];\n                const msb = p.parameters[1];\n                registerHelper.setPC(this.toLittleEndianByte(lsb, msb));\n                return p.cycles;\n            }),\n            o(op.JPNZNN, 2, 12, 'JP NZ, 0x${1}${0}', 'Jumps to NN if Z is not set',\n            (p: OpcodeParam, registerHelper: RegisterHelper) => {\n                const lsb = p.parameters[0];\n                const msb = p.parameters[1];\n                if (registerHelper.readZF() === 0b0) {\n                    registerHelper.setPC(this.toLittleEndianByte(lsb, msb));\n                } else {\n                    registerHelper.incrementPC(p.pcInc);\n                }\n                return p.cycles;\n            }),\n            o(op.JPZNN, 2, 12, 'JP Z, 0x${1}${0}', 'Jumps to NN if Z is set',\n            (p: OpcodeParam, registerHelper: RegisterHelper) => {\n                const lsb = p.parameters[0];\n                const msb = p.parameters[1];\n                if (registerHelper.readZF() === 0b1) {\n                    registerHelper.setPC(this.toLittleEndianByte(lsb, msb));\n                } else {\n                    registerHelper.incrementPC(p.pcInc);\n                }\n                return p.cycles;\n            }),\n            o(op.JPNCNN, 2, 12, 'JP NC, 0x${1}${0}', 'Jumps to NN if C is not set',\n            (p: OpcodeParam, registerHelper: RegisterHelper) => {\n                const lsb = p.parameters[0];\n                const msb = p.parameters[1];\n                if (registerHelper.readCY() === 0b0) {\n                    registerHelper.setPC(this.toLittleEndianByte(lsb, msb));\n                } else {\n                    registerHelper.incrementPC(p.pcInc);\n                }\n                return p.cycles;\n            }),\n            o(op.JPCNN, 2, 12, 'JP C, 0x${1}${0}', 'Jumps to NN if C is set',\n            (p: OpcodeParam, registerHelper: RegisterHelper) => {\n                const lsb = p.parameters[0];\n                const msb = p.parameters[1];\n                if (registerHelper.readCY() === 0b1) {\n                    registerHelper.setPC(this.toLittleEndianByte(lsb, msb));\n                } else {\n                    registerHelper.incrementPC(p.pcInc);\n                }\n                return p.cycles;\n            }),\n\n            // JR\n            o(op.JRZN, 1, 8, 'JR Z, 0x${0}', 'Jumps to N if Z is set',\n            (p: OpcodeParam, registerHelper: RegisterHelper) => {\n                const destinationAddress = p.parameters[0];\n                if (registerHelper.readZF() === 0b1) {\n                    registerHelper.setPC(destinationAddress);\n                } else {\n                    registerHelper.incrementPC(p.pcInc);\n                }\n                return p.cycles;\n            }),\n            o(op.JRNZN, 1, 8, 'JR NZ, 0x${0}', 'Jumps to N if Z is not set',\n            (p: OpcodeParam, registerHelper: RegisterHelper) => {\n                const destinationAddress = p.parameters[0];\n                if (registerHelper.readZF() === 0b0) {\n                    registerHelper.setPC(destinationAddress);\n                } else {\n                    registerHelper.incrementPC(p.pcInc);\n                }\n                return p.cycles;\n            }),\n\n            // LD\n            o(op.LDAN, 1, 8, 'LD A, 0x${0}', 'Put immediate 8 bit n into A',\n            (p: OpcodeParam, registerHelper: RegisterHelper) => {\n                const valueAddress = p.parameters[0];\n                registerHelper.setA(valueAddress);\n                registerHelper.incrementPC(p.pcInc);\n                return p.cycles;\n            }),\n            o(op.LDBN, 1, 8, 'LD B, 0x${0}', 'Put value of register B into immediate 8 bit n',\n            (p: OpcodeParam, registerHelper: RegisterHelper) => {\n                return LD_N_with_NNREG(p, registerHelper.getB(), registerHelper);\n            }),\n            o(op.LDCN, 1, 8, 'LD C, 0x${0}', 'Put value of register C into immediate 8 bit n',\n            (p: OpcodeParam, registerHelper: RegisterHelper) => {\n                return LD_N_with_NNREG(p, registerHelper.getC(), registerHelper);\n            }),\n            o(op.LD_OFFSET_FF_CA, 0, 8, 'LD [0xFF + C], A', 'Put A into address $FF00 + register C',\n            (p: OpcodeParam, registerHelper: RegisterHelper) => {\n                const A = registerHelper.getA();\n                const C = registerHelper.getC();\n                memory.setValueAtAdress(0xFF + C, A);\n                registerHelper.incrementPC(p.pcInc);\n                return p.cycles;\n            }),\n            o(op.LDSPNN, 2, 12, 'LD SP, 0x${1}${0}', 'Loads a 16 bit immediate value into SP',\n            (p: OpcodeParam, registerHelper: RegisterHelper) => {\n                return LD_NNREG_with_NN(p, (val) => registerHelper.setSP(val), registerHelper);\n             }),\n            o(op.LDHLNN, 2, 12, 'LD HL, 0x${1}${0}', 'Loads a 16 bit immediate value into HL',\n            (p: OpcodeParam, registerHelper: RegisterHelper) => {\n                return LD_NNREG_with_NN(p, (val) => registerHelper.setHL(val), registerHelper);\n            }),\n            o(op.LDDHLA, 0, 8, 'LDD [HL], A', 'Put A into memory address HL. Decrement HL. Same as: LD (HL),A - DEC HL',\n            (p: OpcodeParam, registerHelper: RegisterHelper) => {\n                const A = registerHelper.getA();\n                const HLAddr = registerHelper.getHL();\n                memory.setValueAtAdress(HLAddr, A);\n                registerHelper.decrementHL();\n                registerHelper.incrementPC(p.pcInc);\n                return p.cycles;\n            }),\n\n            // CP\n            o(op.CPA, 1, 8, 'CP A, 0x${0}', 'Compares an immediate 8 bit value with register A. TODO talk about C Z N etc..',\n            (p: OpcodeParam, registerHelper: RegisterHelper) => {\n                const comparaisonValue = p.parameters[0];\n                const A = registerHelper.getA();\n                const result = A - comparaisonValue;\n                registerHelper.setN(1);\n                if (result === 0) {\n                   registerHelper.setZF(1);\n                } else {\n                    registerHelper.setZF(0);\n                }\n                registerHelper.incrementPC(p.pcInc);\n                return p.cycles;\n            }),\n\n            // BITOPS\n            o(op.XORA, 0, 4, 'XOR A', 'Logical exclusive OR n with register A, result in A. Z is set if result is 0. N, H & C are reset.',\n            (p: OpcodeParam, registerHelper: RegisterHelper) => {\n                let A  = registerHelper.getA();\n                A = A ^ A;\n                registerHelper.setA(A);\n                if (A === 0) {\n                    registerHelper.setZF(1);\n                }\n                registerHelper.setCY(0);\n                registerHelper.setN(0);\n                registerHelper.setH(0);\n                registerHelper.incrementPC(p.pcInc);\n                return p.cycles;\n            }),\n\n            // PREFIX opcodes\n            o(op.BITBH, 0, 8, 'BIT 7,H', 'Test bit b in register H. Z is set if bit b of register H is 0. N is reset. H is set. C is not affected.',\n            (p: OpcodeParam, registerHelper: RegisterHelper) => {\n                const H = registerHelper.readBit(registerHelper.getH(), 7);\n                if (H === 0) {\n                    registerHelper.setZF(1);\n                }\n                registerHelper.setN(0);\n                registerHelper.setH(1);\n                registerHelper.incrementPC(p.pcInc);\n                return p.cycles;\n            })\n        ];\n    }\n\n    fetchOpcode(address: number): Opcode {\n        try {\n            const opcode = this.fetchOpcodeValue(address);\n            const opcodeMeta: OpcodeMeta = this.opcodeMetas.find((meta) => meta.code === opcode);\n            return new Opcode(opcode, this.buildParameters(address, opcodeMeta),\n                              opcodeMeta.pcInc, opcodeMeta.cycles,\n                              opcodeMeta.opcodeBytes, opcodeMeta.template);\n        } catch (any) {\n            return new Opcode(0, [], 0, 0, 0, 'UNKNOWN');\n        }\n    }\n\n    executeOpCode(opcode: Opcode, registerHelper: RegisterHelper): number {\n        return this.opcodeMetas\n            .find((om) => om.code === opcode.opcode)\n            .execute({parameters: opcode.parameters, pcInc: opcode.pcInc, cycles: opcode.cycles}, registerHelper);\n    }\n\n    getOpcodes(): Array<OpcodeMeta> {\n        return this.opcodeMetas;\n    }\n\n    private makeOpcodeMeta(code: OpCodes, params: number, cycles: number, template: string, doc: string, execute: (OpcodeParam, RegisterHelper) => number) {\n        const isPrefix = code.toString(16).includes(OpCodes.PREFIX.toString(16));\n        const bytes = isPrefix ? 2 : 1;\n        const pcInc = params + bytes;\n        return {code, name: template, params, pcInc, cycles, template, doc, opcodeBytes: bytes, execute};\n    }\n\n    private buildParameters(initialPC: number, opcodeMeta: OpcodeMeta): Array<number> {\n        const parameters = new Array<number>();\n        for (let i = 0; i < opcodeMeta.params; i++) {\n            parameters.push(this.memory.getValueAtAdress(initialPC + (i + opcodeMeta.opcodeBytes)));\n        }\n        return parameters;\n    }\n\n    private fetchOpcodeValue(address: number): number {\n        const prefixOpcode = OpCodes.PREFIX;\n        let opcode = this.memory.getValueAtAdress(address);\n        if (opcode === prefixOpcode) {\n            address++;\n            opcode = Number.parseInt(opcode.toString(16) + this.memory.getValueAtAdress(address).toString(16), 16);\n        }\n        return opcode;\n    }\n\n    private toLittleEndianByte(lsb: number, msb: number): number {\n        const addr = Number.parseInt(msb.toString(16).padStart(2, '0') + lsb.toString(16).padStart(2, '0'), 16);\n        return addr;\n    }\n}\n","import { bit } from '../custom-types';\nimport { CPU } from './cpu';\n\n// tslint:disable:no-bitwise\nexport class RegisterHelper {\n\n    readonly ZF: number = 0;\n    readonly N: number = 1;\n    readonly H: number = 2;\n    readonly CY: number = 3;\n\n    constructor(private cpu: CPU) {}\n\n    // Flags\n    setZF(value: bit) {\n        this.cpu.af = this.setBit(this.cpu.af, this.ZF, value);\n    }\n\n    readZF(): bit {\n        return this.readBit(this.cpu.af, this.ZF);\n    }\n\n    setN(value: bit) {\n        this.cpu.af = this.setBit(this.cpu.af, this.N, value);\n    }\n\n    readN(): bit {\n        return this.readBit(this.cpu.af, this.N);\n    }\n\n    setH(value: bit) {\n        this.cpu.af = this.setBit(this.cpu.af, this.H, value);\n    }\n\n    readH(): bit {\n        return this.readBit(this.cpu.af, this.H);\n    }\n\n    setCY(value: bit) {\n        this.cpu.af = this.setBit(this.cpu.af, this.CY, value);\n    }\n\n    readCY(): bit {\n        return this.readBit(this.cpu.af, this.CY);\n    }\n\n    // registers\n    setA(value: number) {\n        this.cpu.af = this.setHigherByte(this.cpu.af, value);\n    }\n\n    // registers\n    setC(value: number) {\n        this.cpu.bc = this.setHigherByte(this.cpu.bc, value);\n    }\n\n    getA(): number {\n        return this.getHigherByte(this.cpu.af);\n    }\n\n    getB(): number {\n        return this.getHigherByte(this.cpu.bc);\n    }\n\n    getC(): number {\n        return this.getLowerByte(this.cpu.bc);\n    }\n\n    getD(): number {\n        return this.getHigherByte(this.cpu.de);\n    }\n\n    getE(): number {\n        return this.getLowerByte(this.cpu.de);\n    }\n\n    getF(): number {\n        return this.getLowerByte(this.cpu.af);\n    }\n\n    getHL(): number {\n        return this.cpu.hl;\n    }\n\n    getH(): number {\n        return this.getHigherByte(this.cpu.hl);\n    }\n\n    // INC\n    incrementPC(bytes: number = 1) {\n        this.cpu.pc += bytes;\n        if (this.cpu.pc > 0xFFFF) {\n            this.cpu.pc = 0;\n        }\n    }\n    incrementBC() {\n        this.cpu.bc ++;\n        if (this.cpu.bc > 0xFFFF) {\n            this.cpu.bc = 0;\n        }\n    }\n    incrementSP() {\n        this.cpu.sp ++;\n        if (this.cpu.sp > 0xFFFF) {\n            this.cpu.sp = 0;\n        }\n    }\n    incrementHL() {\n        this.cpu.hl ++;\n        if (this.cpu.hl > 0xFFFF) {\n            this.cpu.hl = 0;\n        }\n    }\n    incrementDE() {\n        this.cpu.de ++;\n        if (this.cpu.de > 0xFFFF) {\n            this.cpu.de = 0;\n        }\n    }\n\n    incrementA() {\n       const A = this.getA() + 1;\n       if (A > 0xFF) {\n           this.setA(0);\n       } else {\n           this.setA(A);\n       }\n    }\n\n    incrementC() {\n        const C = this.getC() + 1;\n        if (C > 0xFF) {\n            this.setC(0);\n        } else {\n            this.setC(C);\n        }\n     }\n\n\n    // DEC\n    decrementBC() {\n        this.cpu.bc--;\n        if (this.cpu.bc < 0) {\n            this.cpu.bc = 0xFFFF;\n        }\n    }\n    decrementSP() {\n        this.cpu.sp--;\n        if (this.cpu.sp < 0) {\n            this.cpu.sp = 0xFFFF;\n        }\n    }\n    decrementHL() {\n        this.cpu.hl--;\n        if (this.cpu.hl < 0) {\n            this.cpu.hl = 0xFFFF;\n        }\n    }\n    decrementDE() {\n        this.cpu.de--;\n        if (this.cpu.de < 0) {\n            this.cpu.de = 0xFFFF;\n        }\n    }\n\n    decrementA() {\n        const A = this.getA() - 1;\n        if (A < 0x00) {\n            this.setA(0xFF);\n        } else {\n            this.setA(A);\n        }\n     }\n\n    setPC(address: number) {\n        this.cpu.pc = address;\n    }\n\n    setSP(address: number) {\n        this.cpu.sp = address;\n    }\n\n    setHL(address: number) {\n        this.cpu.hl = address;\n    }\n\n    // Helper functions\n    setLowerByte(register: number, value: number): number {\n        const mask = 0b0000_0000_1111_1111;\n        return (register & ~mask) | (value & mask);\n    }\n\n    setHigherByte(register: number, value: number): number {\n        value = value << 8;\n        const mask = 0b1111_1111_0000_0000;\n        return (register & ~mask) | (value & mask);\n    }\n\n    getLowerByte(register: number): number {\n        const mask = 0b0000_0000_1111_1111;\n        return register & mask;\n    }\n\n    getHigherByte(register: number): number {\n        return register >> 8;\n    }\n\n    readBit(register: number, position: number): bit {\n        return ((register >> position) & 0b1) as bit;\n    }\n\n    setBit(register: number, position: number, b: bit): number {\n        const mask = ~(1 << position);\n        return (b << position) | (mask & register);\n    }\n}\n","export type bit = 0|1;\nexport class Opcode {\n    constructor(public opcode: number, public parameters: Array<number>,\n                public pcInc: number, public cycles: number, public opcodeBytes,\n                private template: string) {}\n\n    getOpcodeHumanReadable(): string {\n\n        let humanReadable = this.template;\n        for (let i = 0; i < this.parameters.length; i++) {\n            humanReadable = humanReadable.replace(`\\${${i}}`, this.parameters[i].toString(16).toUpperCase().padStart(2, '0'));\n        }\n        return humanReadable;\n    }\n\n    getOpcodeTotalLength(): number {\n        const length = this.parameters.length + this.opcodeBytes;\n        return length > 0 ? length : 1;\n    }\n}\n\n// TODO do not expose opcode meta\nexport interface OpcodeMeta {\n    code: OpCodes;\n    name: string;\n    params: number;\n    pcInc: number;\n    cycles: number;\n    template: string;\n    doc: string;\n    opcodeBytes: number;\n    execute: (OpcodeParam, RegisterHelper) => number;\n}\n\nexport const DEMO_PROGRAM = '0x0\\n' +\n     '0x3E ' + '0x01\\n'             // LD A, #01\n   + '0xFE ' + '0xFF\\n'             // :103  CP A, #FF\n   + '0xCA ' + '0x0F ' + '0x01\\n'  // JP Z, #010F (Little Endian)\n   + '0x3C\\n'                        // INC A\n   + '0x13\\n'                        // INC DE\n   + '0x23\\n'                        // INC HL\n   + '0x33\\n'                        // INC SP\n   + '0xC3 ' + '0x03 ' + '0x01\\n'  // JP #0103 (Little Endian)\n   + '0x3D\\n'                        // :x010F DEC A\n   + '0xFE ' + '0x0\\n'              // CP A, #00\n   + '0xCA ' + '0x03 ' + '0x01\\n'  // JP Z, #0103 (Little Endian)\n   + '0xC3 ' + '0x0F ' + '0x01'; // JP #010F (Little Endian)\n\nexport enum OpCodes {\n    NOP = 0x00,\n    // Interrupts\n    EI = 0xFB,\n    DI = 0xF3,\n    // CP\n    CPA = 0xFE,\n    // LD\n    LDAN = 0x3E,\n    LDBN = 0x06,\n    LDCN = 0x0E,\n    LD_OFFSET_FF_CA = 0xE2,\n    LDSPNN = 0x31,\n    LDHLNN = 0x21,\n    LDDHLA = 0x32,\n    // INC\n    INCA = 0x3C,\n    INCC = 0x0C,\n    INCBC = 0x03,\n    INCDE = 0x13,\n    INCHL = 0x23,\n    INCSP = 0x33,\n    // DEC\n    DECA = 0x3D,\n    DECBC = 0x0B,\n    DECDE = 0x1B,\n    DECHL = 0x2B,\n    DECSP = 0x3B,\n\n    JPNN = 0xC3,\n    JPZNN = 0xCA,\n    JPNZNN = 0xC2,\n    JPNCNN = 0xD2,\n    JPCNN = 0xDA,\n\n    JRZN = 0x28,\n    JRNZN = 0x20,\n\n    // BITOPS\n    XORA = 0xAF,\n\n    // PREFIX\n    PREFIX = 0xCB,\n    BITBH = 0xCB7C\n}\n","import { Injectable } from '@angular/core';\nimport { CPU } from './cpu/cpu';\nimport { Memory } from './cpu/memory';\nimport { delay } from 'q';\nimport { OpCodeFetcher } from './cpu/opcode-fetcher';\nimport { OpcodeMeta, Opcode } from './custom-types';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class HardwareService {\n\n  private cpu: CPU;\n  private memory: Memory;\n  private opcodeFetcher: OpCodeFetcher;\n\n  private running: boolean;\n  private runP: Promise<void>;\n  private paused: boolean;\n\n  constructor() {\n    this.memory = new Memory();\n    this.opcodeFetcher = new OpCodeFetcher(this.memory);\n    this.cpu = new CPU(this.opcodeFetcher);\n  }\n\n  isRunning(): boolean {\n    return this.running;\n  }\n  isPaused(): boolean {\n    return this.paused;\n  }\n\n  turnOn() {\n    if (this.runP) {\n      this.running = false;\n      this.runP.finally(() => this.run());\n    } else {\n      this.runP = this.run();\n    }\n  }\n\n  async run() {\n    this.running = true;\n    while (this.running) {\n      if (!this.paused) {\n        await this.cpu.step();\n      } else {\n        await delay(1);\n      }\n    }\n  }\n\n  pause() {\n    this.paused = !this.paused;\n  }\n\n  stop() {\n    this.running = false;\n    this.paused = false;\n  }\n\n  reset() {\n    this.stop();\n    this.memory.reset();\n    this.cpu.reset();\n  }\n\n  loadProgram(program: string) {\n    this.reset();\n    this.memory.loadProgram(program, this.cpu.pc);\n  }\n\n  setCPuStepMs(ms: number) {\n    this.cpu.setCpuStep(ms);\n  }\n\n  getMemory(startAddress: number, endAddress: number): Array<{address: number, value: number, opcodeHumanReadable: string}> {\n    const a = new Array();\n    let currentAddress = startAddress;\n    let nextHumanReadable = startAddress;\n\n    for (const value of this.memory.getMemory().slice(startAddress, endAddress)) {\n\n      if (currentAddress === nextHumanReadable) {\n        const opcode = this.opcodeFetcher.fetchOpcode(currentAddress);\n        const opcodeHumanReadable = opcode.getOpcodeHumanReadable();\n        a.push({\n          address: currentAddress,\n          value: value,\n          opcodeHumanReadable: opcodeHumanReadable\n        });\n        nextHumanReadable = currentAddress + opcode.getOpcodeTotalLength();\n      } else {\n        a.push({\n          address: currentAddress,\n          value: value,\n          opcodeHumanReadable: ''\n        });\n      }\n      currentAddress++;\n    }\n    return a;\n  }\n\n  updateMemory(address: number, value: number) {\n    this.memory.setValueAtAdress(address, value);\n  }\n\n  getCpuRegisters(): Array<{name: string, value: number}> {\n    return [\n        {name: 'a', value: this.cpu.getA()},\n        {name: 'f', value: this.cpu.getF()},\n        {name: 'b', value: this.cpu.getB()},\n        {name: 'c', value: this.cpu.getC()},\n        {name: 'd', value: this.cpu.getD()},\n        {name: 'e', value: this.cpu.getE()},\n        {name: 'af', value: this.cpu.af},\n        {name: 'bc', value: this.cpu.bc},\n        {name: 'de', value: this.cpu.de},\n        {name: 'hl', value: this.cpu.hl},\n        {name: 'sp', value: this.cpu.sp},\n        {name: 'pc', value: this.cpu.pc}\n      ];\n  }\n\n  getOpcodes(): Array<OpcodeMeta> {\n    return this.opcodeFetcher.getOpcodes();\n  }\n}\n","import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DocumentationService {\n\n  filter = '';\n\n  constructor() { }\n}\n","import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ProgramLoaderService {\n\n  program = '';\n\n  constructor() { }\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"],"sourceRoot":""}