import { RegisterHelper } from './register-helper';
import { OpCodeExecutor } from './opcode-executor';
import { Memory } from './memory';
import { delay } from 'q';
import { Opcode } from '../custom-types';
import { OpCodeFetcher } from './opcode-fetcher';

export class CPU {

    private readonly EMPTY = 0b0000_0000_0000_0000;

    /*
    On power up, the GameBoy Program Counter is
    initialized to $100 (100 hex) and the instruction found
    at this location in ROM is executed.
    The Program Counter from this point on is controlled,
    indirectly, by the program instructions themselves that
    were generated by the programmer of the ROM cart.
    */
    private readonly PC_INIT = 0x100;

    private registerHelper: RegisterHelper;
    private opcodeExecutor: OpCodeExecutor;

    private cpuStepMS = 5;
    af: number;
    bc: number;
    de: number;
    hl: number;
    sp: number;
    pc: number;

    constructor(private memory: Memory, private opcodeFetcher: OpCodeFetcher) {
        this.reset();
        this.registerHelper = new RegisterHelper(this);
        this.opcodeExecutor = new OpCodeExecutor(this.registerHelper, this.memory);
    }

    reset() {
        this.pc = this.PC_INIT;
        this.sp = this.EMPTY;
        this.af = this.EMPTY;
        this.bc = this.EMPTY;
        this.de = this.EMPTY;
        this.hl = this.EMPTY;
    }

    step(): Q.Promise<void> {
        const opcode: Opcode = this.opcodeFetcher.fetchOpcode(this.pc);
        const cpuCyclesTaken: number = this.opcodeExecutor.executeOpCode(opcode);
        const _delay = cpuCyclesTaken * this.cpuStepMS;
        return delay(_delay);
    }

    setCpuStep(ms: number) {
        this.cpuStepMS = ms;
    }
}
